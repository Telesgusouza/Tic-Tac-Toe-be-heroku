package com.example.demo.handler;

import java.io.IOException;
import java.nio.file.attribute.UserPrincipal;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.example.demo.entity.User;
import com.example.demo.event.MatchFoundEvent;
import com.example.demo.repository.UserRepository;

@Component
public class WsWebSocketHandler extends TextWebSocketHandler implements ApplicationListener<MatchFoundEvent> {

//	private Map<String, WebSocketSession> sessions;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ApplicationContext applicationContext;

	private final ConcurrentLinkedQueue<QueuedMessage> queuedMessages = new ConcurrentLinkedQueue<>();

	private final ConcurrentHashMap<String, WebSocketSession> sessions = new ConcurrentHashMap<>();

//	public void searchForMatch(User user) {
//	    // ... lógica de busca de match ...
//	    
//	    MatchFoundEvent event = new MatchFoundEvent(this, matchId, players);
//	    applicationContext.publishEvent(event); // Certifique-se de ter acesso ao ApplicationContext
//	}

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("WebSocket connection established: " + session.getId());
		sessions.put(session.getId(), session);

		System.out.println("================== after connection estabilish ===================");
		System.out.println(session);

		// Armazene o usuário na sessão
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null && auth.isAuthenticated()) {
			Object principal = auth.getPrincipal();
			if (principal instanceof User) {
				session.getAttributes().put("user", principal);
			}
		}

		session.sendMessage(new TextMessage("connected"));

		// Implementar um mecanismo de keep-alive mais eficiente
		scheduleKeepAlive(session);
	}

	private void scheduleKeepAlive(WebSocketSession session) {
		ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();

		System.out.println("================== schedule Keep Alive ===================");
		System.out.println(session);

		executor.scheduleAtFixedRate(() -> {
			try {
				if (session.isOpen()) {
					session.sendMessage(new TextMessage("keep-alive"));
				} else {
					executor.shutdown();
				}
			} catch (IOException e) {
				System.err.println("Erro ao enviar keep-alive: " + e.getMessage());
				executor.shutdown();
			}
		}, 0, 30, TimeUnit.SECONDS);
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("WebSocket connection closed: " + session.getId());
		sessions.remove(session.getId());
	}

	@Override
	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
		System.out.println("Received message: " + message);
		// Processar a mensagem aqui
	}

	@Override
	public void onApplicationEvent(MatchFoundEvent event) {
		UUID matchId = event.getMatchId();
		List<User> players = event.getPlayers();

		for (User player : players) {
			WebSocketSession session = getWebSocketSession(player);

			if (session != null && session.isOpen()) {
				try {
					String payload = "match_found:" + matchId.toString() + ":" + player.getId();
					session.sendMessage(new TextMessage(payload));
					System.out.println("Mensagem enviada com sucesso para o jogador: " + player.getLogin());
				} catch (IOException e) {
					System.err.println(
							"Erro ao enviar mensagem para o jogador " + player.getLogin() + ": " + e.getMessage());
					queuedMessages.add(new QueuedMessage(matchId, player));
				}
			} else {
				System.out.println("Sessão não encontrada ou fechada para o jogador: " + player.getLogin());
				queuedMessages.add(new QueuedMessage(matchId, player));
			}
		}

		processQueuedMessages();
	}

	private void processQueuedMessages() {
		Iterator<QueuedMessage> iterator = queuedMessages.iterator();
		while (iterator.hasNext()) {
			QueuedMessage message = iterator.next();
			User player = userRepository.findById(message.getPlayer().getId()).orElse(null);

			if (player != null) {
				WebSocketSession session = sessions.get(player.getId().toString());
				if (session != null && session.isOpen()) {
					try {
						String payload = "match_found:" + message.getMatchId() + ":" + player.getId();
						session.sendMessage(new TextMessage(payload));
						System.out.println(
								"Mensagem enviada com sucesso após retry para o jogador: " + player.getLogin());
						iterator.remove(); // Remova a mensagem da fila se enviada com sucesso
					} catch (IOException e) {
						System.err.println("Erro ao enviar mensagem após retry: " + e.getMessage());
					}
				}
			}
		}
	}

//
//	@Override
//	public void onApplicationEvent(MatchFoundEvent event) {
//		UUID matchId = event.getMatchId();
//		List<User> players = event.getPlayers();
//
//		for (User player : players) {
//			String playerId = player.getId().toString();
//
//			WebSocketSession session = sessions.get(playerId);
//
//			System.out.println("===================================");
//			System.out.println("session => " + session);
//			System.out.println("event => " + event);
//
//			if (session != null && session.isOpen()) {
//				try {
//					String payload = "match_found:" + matchId.toString() + ":" + playerId;
//					session.sendMessage(new TextMessage(payload));
//
//					System.out.println("Mensagem enviada com sucesso para o jogador: " + player.getLogin());
//				} catch (IOException e) {
//					System.err.println(
//							"Erro ao enviar mensagem para o jogador " + player.getLogin() + ": " + e.getMessage());
//				}
//			} else {
//				System.out.println("Sessão não encontrada ou fechada para o jogador: " + player.getLogin());
//			}
//		}
//	}

	private WebSocketSession getWebSocketSession(User user) {
		return sessions.values().stream()
				.filter(session -> session.getAttributes().containsKey("user")
						&& ((User) session.getAttributes().get("user")).getId().equals(user.getId()))
				.findFirst().orElse(null);
	}

//	private WebSocketSession getWebSocketSession(User user) {
//		return sessions.get(user.getId().toString());
//	}
}
